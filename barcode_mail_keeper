#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use threads;
use threads::shared;
use v5.10;
$| = 1;

use File::Basename 'dirname';
use File::Spec;
use Image::Magick;
use Barcode::ZBar;
use Data::Dumper;
use Net::POP3;
use MIME::Lite;
use Carp;
use Email::MIME;
use File::Basename;
use POSIX qw(setsid);

# мониторинг осуществляется демоном incron (запись в  incrontab <целевая папка> IN_CREATE /home/asda/workspace/Home/script/arhiv/ImageMonitor.pl $@ $@/$#)

our $tmp_dir = join "/", File::Spec->splitdir( dirname(__FILE__) ), 'tmp';
my $conffile = join "/", File::Spec->splitdir( dirname(__FILE__) ), 'scan.conf';
our $config       = do "$conffile";
our $resolution = $config->{resolution} || 200;
our $debug      = 0;

#my $logfile=join "/",File::Spec->splitdir(dirname(__FILE__)),'scan.log';
#open (STDOUT, ">> $logfile") or die "do not forward STDOUT to $logfile...\n";
#open (STDERR, ">> $logfile") or die "do not forward STDERR to $logfile....\n";
sub main {
	$debug = "debug" ~~ [@_];

	say "Debug mode" if $debug;

	daemonize() unless $debug;

	while (1) {
		eval {
			foreach ( @{ $config->{mail} } ) {
				load_messages($_);
			}
		};
		warn "ERROR $@" if ($@);
		sleep 5;
	}

}

sub load_messages($) {
	my $m_conf = shift;

	my $pop = Net::POP3->new( $m_conf->{pop3_server} );
	my $num_messages = $pop->login( $m_conf->{username}, $m_conf->{password} );

	say "Messajes in box $m_conf->{username}, is $num_messages" if $debug;

	for my $i ( 1 .. $num_messages ) {

		say "Parse $i message" if $debug;

		my $msg = $pop->get($i);

		parse_message($m_conf,$msg);

		$pop->delete($i);
	}
	$pop->quit;

	undef $pop;

	unlink glob "$tmp_dir/*";
}

sub parse_message($$) {
	my ( $m_conf, $msg ) = @_;
	my $em = Email::MIME->new( join '', @$msg );
	for ( my @parts = $em->parts ) {

		#print $_->content_type, "\n";
		next unless $_->content_type =~ m(^application/pdf)i;
		my $filename = basename( $_->filename || '' );
		my $basefilename = $filename || 'UNNAMED';
		my $cnt = 0;
		while ( -e "$tmp_dir/$filename" ) {
			my ( $d, $m, $y ) = (localtime)[ 3 .. 5 ];
			$filename = sprintf( "%s_%04d%02d%02d_%04d", $basefilename, $y + 1900, $m + 1, $d, ++$cnt );
		}
		open my $fh, ">", "$tmp_dir/$filename" or croak "Error create file $tmp_dir/$filename \n$!";
		binmode $fh;
		print $fh $_->body;
		close $fh;
		parse_file_and_send_message( $m_conf, "$tmp_dir/$filename" );
	}
}

sub parse_file_and_send_message($$) {
	my ( $m_conf, $file ) = @_;

	my $msg;

	my $barcode = get_barcode_from_file($file);
	if ($barcode) {
		$msg = MIME::Lite->new(
			To => Encode::encode( 'mime-header', " <$m_conf->{to}>" ),
			From     => " <$m_conf->{from}>",
			Encoding => 'binary',
			Type     => 'text/plain;charset="utf-8"',
			Subject  => "OK: " . $barcode,
			Data     => "OK: " . $barcode
		);
		$msg->attach(
			Type        => 'application/pdf',
			Filename    => "$barcode.pdf",
			Path        => "$file",
			Disposition => 'attachment'
		);

	} else {
		$file =~ /^.+\/(.+)\.pdf/;
		$msg = MIME::Lite->new(
			To => Encode::encode( 'mime-header', " <$m_conf->{to}>" ),
			From     => " <$m_conf->{from}>",
			Encoding => 'binary',
			Type     => 'text/plain;charset="utf-8"',
			Subject  => "ERROR: $1.pdf",
			Data     => "ERROR: $1.pdf"
		);
		$msg->attach(
			Type        => 'application/pdf',
			Filename    => "$1.pdf",
			Path        => "$file",
			Disposition => 'attachment'
		);

	}
	$msg->send( 'smtp', $m_conf->{smtp_server} || 'localhost' );    #, AuthUser=>$conf->{mail}->{username}, AuthPass=>$conf->{mail}->{password});
	say "Message sended to $m_conf->{to} from $m_conf->{from}" if $debug;

}

sub SavePartStream {
	my ( $magick, $lastId, $SavePath, $SaveId, $barcode ) = @_;
	$barcode =~ s/--/-/g;
	my $stream = Image::Magick->new( depth => 8, density => $resolution );
	for ( my $ii = 0 ; $ii <= $lastId ; $ii++ ) {
		push @$stream, $magick->[$ii] if $magick->[$ii];
	}
	$stream->Write( filename => "$SavePath/document" . $SaveId . ".jpg", compression => 'JPEG', quality => '80' );
}

#Сохраняем в файл
#Путь,Что сохраняем
sub SaveInfoInFile {
	{
		my $SavePath = shift;
		my $data     = shift;
		my $SaveId   = shift || "";
		my $fh;
		open $fh, '>:utf8', $SavePath . "/currentinfo$SaveId.txt" or warn "Save current error", last;
		print $fh $data;
		close($fh);
	}
}

sub FindBarcode {
	my ( $Raw, $width, $hight ) = @_;

	# wrap image data
	my $image = Barcode::ZBar::Image->new();

	$image->set_format('Y800');
	$image->set_size( $width, $hight );
	$image->set_data($Raw);

	my $scanner = Barcode::ZBar::ImageScanner->new();

	# Enable all decoders
	$scanner->parse_config( $config->{typeEANcodes} || "enable" );    #Apply a decoder configuration setting. See the documentation for zbarcam/zbarimg for available configuration options.
	                                                                # scan the image for barcodes
	my $n       = $scanner->scan_image($image);
	my @barcode = ();

	# extract results
	foreach my $symbol ( $image->get_symbols() ) {
		push @barcode, $symbol->get_data();

	}

	say "Find barcodes " . join( ",", @barcode ) if $debug;

	# clean up
	undef($image);
	return @barcode;
}

sub LoadPic {
	my ( $magick, $file ) = @_;
	$config->{mincolors} = 16000 unless $config->{mincolors};
	my $calk_listov = 0;
	$magick->Read($file) && die;
	return scalar( @{$magick} )
}

sub get_barcode_from_file {
	my $file = shift;

	my $magick = Image::Magick->new( depth => 8, density => $resolution, type => "Grayscale" );

	my $listov = LoadPic( $magick, $file );    #Anount pages

	my @BarRezult = ();

	my @Size = $magick->Get(qw(columns rows));
	my $i;
	for ( $i = 0 ; $magick->[$i] ; $i++ ) {
		my $raw = $magick->[$i]->ImageToBlob( magick => 'GRAY', depth => 8 );
		push @BarRezult, FindBarcode( $raw, @Size );
	}

	return $BarRezult[0];
}

sub daemonize {

	#daemonize myself
	chdir '/' or die "Can't chdir to /: $!";
	umask 0;
	open STDIN,  '/dev/null'                            or die "Can't read /dev/null: $!";
	open STDOUT, ">>/tmp/barcode_mail_keeper_parse.log" or die "Can't write to /tmp/barcode_mail_keeper_parse.log: $!";
	open STDERR, ">>/tmp/barcode_mail_keeper_error.log" or die "Can't write to /tmp/barcode_mail_keeper_error.log: $!";

	#	open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
	#	open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";
	defined( my $pid = fork ) or die "Can't fork: $!";
	exit if $pid;
	setsid or die "Can't start a new session: $!";
}

exit( &main(@ARGV) );
